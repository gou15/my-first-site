<style type = "text/css"> <!-- this allows text css code inside HTML head doc -->
<link rel="stylesheet" href="style.css"> <!-- links a style sheet, goes in <head> --> rel = relationship
tag, tag, tag { properties assigned to tag }
    generic styling - tag styling - hierarchical styling - class - id
* to assign styling to all tags (use to set "default" styling)
# when assigning styling to id name i.e. "#main {xxx}"
. when assigning styling to a class i.e. ".main {xxx}"
    id and class can be assigned to any HTML tag    
commas between tag types allows assignment of same styling to multiple tags

#hexadecimal code is standard when assigning styles regardless of other ways to assign
rgba coding allows you to set red green blue and alpha (tranparency from 0 to 1) values to colors

tag, tag2, .class, #id, tag3#id2 {
    color: #a1b2c3; font-family: font1, "font 2", font-3; font-size: 16px; font-weight: bold; font-style: oblique;
}

can put CSS styling in individual tags (which will overwrite the instruction of the styling from the head)
    i.e. <span style="color: red;">Red text even if stylesheet called for black</span>

can get more specific by assigning elements and tags/ids to same ruleset
    p.main {
        rules
    }
    assigns rules to all <p> tags with class="main", leaves other <p> and other main classes alone

pseudo selectors are not real tags but can be used to assign styling based on their unique rules
    a:link {rules for links}
    a:active {rules for links to page you're already on}
    a:visited {rules for links you've already been to}
    tag:hover {rules for what happens when mouseover the tag}
    tag:last-child {rules for what happens to last child element within parent element}
    tag1 tag2 {rules for ALL tag2 inside of tag1} (NO COMMAS! descendant selector) (i.e. all <a> inside <div> regardless of whether <a> is also inside <p>, <span>, etc...)
    tag1>tag2 {rules for all tag2 DIRECTLY DESCENDED from tag1} (child selector) (i.e. all <a> inside <div> UNLESS <a> is in another tag inside the <div>)
    tag::first-line {rules for first line of tag selected}
    tag::first-letter {rules for first letter of tag selected}
    tag::after {content: "x"; rules for tags following content defined in rules}
    tag::before {content: "x"; rules for tags prior to content defined in rules}
    tag1 + tag2 {rules for all tag2 immediately following tag1 in same parent element, will only style the 1 tag immediately following} (adjacent sibling combinator)
    tag1 ~ tag2 {rules for all tag2 following tag1 in same parent element, not necessarily adjacent, will style all tags following} (general sibling combinator)
    go deeper... tag3, tag4, tag99... that's all ok up here

font-family: serif; "times new roman", times, arial;
    tells the browser what font to display the content in, defining multiple fonts gives browser options to find font that works for it

@font-face { font-family: "Name of custom font"; src: url("https://www.customfontwebsite.com/customfontfile.font");}
    pulls a custom font from the internet

Google fonts work by putting a link in the header of the HTML
<link href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono" rel="stylesheet" />
THEN calling it off in the font-family in the .css file
tag {font-family: "IBM Plex Mono", monospace;}

tag {font-size: PX or PT or XXem;} where PX is pixels, PT is points, and XXem is relative size (i.e. 2em = twice as big)
    standard sizing is pixels for most generic tag and em for all following styling
tag {font-weight: normal or bold or bolder;} or use #100-900 where 400 is normal and 700 is bold
tag {font-style: style;} lets you set styles like italic or oblique
tag {text-transform: transformation;} lets you change the text to uppercase, lowercase, whatever...
tag {text-align: alignment;} allows you to align text left, right, justify, etc...
tag {text-decoration: decoration;} allows text decorations like none, underline, overline, line-through, and blink
    can set text-decoration-color inside text decoration tag 
    can set text-decoration-style inside text decoration tag including solid, double, dotted, dashed, and wavy
    OR you can just set color and style inside the decoration tag, here's an example
    p {text-decoration: underline red dashed;}
tag {text-indent: ##px;} sets indent length in pixels (i.e. 20px;)
tag {text-shadow: x-offsetpx y-offsetpx blur-radpx color;} adds a colored shadow to the text defined by your offsets
tag {letter-spacing: XXpx;} sets kerning (i.e. 3px)
tag {word-spacing: XXpx;} sets spacing between tags and words (i.e. 4px)
tag {line-height: #;} set with font-size, specifies line height, will have to play with this to understand it
tag {vertical-align: alignment;} specifies vertical alignment of an inline or table-cell element (does not work on block elements)
    alignments for vertical-align include baseline, sub, super, text-top, text-bottom, middle, top, and bottom

BOX MODEL! HTML elements are boxes, CSS applies styling to those boxes
margin = space between boxes
border = outer limit of box
padding = distance between content and border
content = whatsinthebox
can set width of all of these distances in pixels specifying as top right bottom and left (trbl) and margin border or padding (mbp)
    i.e. tp = top padding, bb = bottom border, this works clockwise starting from t
tag {border: #px style color;} sets a border around content
can get downright specific with borders:
    div {border-top: 1px solid red; border-bottom: 2px dashed green; border-left: 3px wavy purple; border-right: 4px dotted yellow;}
tag {border-radius: #px, #px, #px, #px;} sets radius by pixel value, starting at top left going clockwise

for border/padding thickness or border rad (rad in brackets), if you only enter:
    one pixel value it is applied to all 4 sides (corners)
    two pixel values, first is applied to top(left) and bottom(right)
    three pixel values, first is applied to top(left), second is applied to (top)right and (bottom)left, third is applied to bottom(right)
    four pixel values, first is applied to top(left) then clockwise

padding: and margin: formatting are same as border formatting
can set element width and height using width: and height:
can set min and max widths/heights using min-width: or max-height or whatever
margin values can be set to auto if the width value is set (i.e. width:500px margin:auto)
    this will center align a block element horizontaly
    inline elements require text-align:center to be centered

background-color: to set background, transparent is default
overflow: property (where property can be auto, hidden or scroll)
    this defines what to do with content that is too large for an element block, most common is auto
    can define x and y overflow using overflow-x and overflow-y
box-shadow: Xpx Xpx Xpx -Xpx color; (horizontal shadow length, vert shadow length, blur rad, spread rad (where spread rad defines how much area will be added or taken away from the overall size of the shadow relative to the element size)
    sets a shadow around an element's frame
    add "inset" (no quotes) in box-shadow definitions to make that shadow go in instead of out

display: sets how element blocks behave if deviating from HTML default, values include inline, block, inline-block, none (hides data from user), table, flex, and grid
visibility: hidden OR visible; hides or shows the element
difference between display:none and visibility:hidden is that display removes the element entirely, visibility hides the element content but leaves the element box

background-image: url(pathway/to/image.png), url(path/to/image2.png); multiple images just change from top to bottom
background-repeat: defines how the background will be repeated (repeat-x, repeat-y, repeat, no-repeat)
background-position: sets initial position for each background image (default top left corner)
    XXpx XXpx (left center OR right) (top center OR bottom) 1st value for x-axis, 2nd for y-axis where XXpx is size
background-attachment: (fixed, scroll, OR local) defines how background behaves when user scrolls
background: lets you do all of the above in ONE simple line, format as follows:
    background: red url(to/image.png) no-repeat fixed center center
linear-gradient(XXdeg, color, color) is a background definition which creates an image consisting of a progressive transition between 2 or more colors

cursor: (pointer, auto, crosshair, default, move, text, wait, or help) defines which cursor to display when mouseover an element
(unordered) list-style-type: (none, disc, circle, square)
(ordered) list-style-type: (decimal, decimal-leading-zero, lower-alpha, upper-alpha, lower-roman, upper-roman)
    style types define appearance of list item elements
list-style-position: (outside OR inside) specifies position of the list item marker relative to a list item
list-style-image: url(to/image.png) will use an image as the list item marker
list-style: lets you set type, position, and image in one line
    list-style: square inside url(to/image.png);

TABLES
border-spacing: XXpx XXpx; specifies distances between borders of adjacent table cells (horiz vert spacing)
border-collapse: collapse OR separate; whether cells share the same border or not

FORMS
all previous styling can be applied to forms (display, border, background-color, font-size, border-color, margin, color, padding, font-size, font-weight, border-radius, cursor...)
input[type="TYPE"] {rules for input TYPE}

LAYOUT
the way your website is divided (you want sidebar, top bar, nav bar, columns...?)
this is all about grids and columns and how you want things displayed on other devices
there are no styling elements to learn here - it's literally just theory
it ties into the position styles (below) and into bootstrap

position: (static, relative, absolute, fixed, OR sticky) defines how an element is positioned in the document
position static is default
position relative can be set with offsets using top, right, bottom, and/or left, sets position relative to the container containing the tag
    position: relative;
    top: XXpx;
    left: XXpx;
position absolute removes the element from normal document flow and no space is left for it
    final position is determined by the values of top right bottom and left
    final position is based on the absolute element's parent element
    kind of like creating a relative position between parent and child element
z-index: # (where # is an integer greater than or equal to 1) defines what elements are shown on top of others if they overlap (lowest numbers overlapped by higher number)
position fixed removes element from normal document flow, positioned relative to viewport and doesn't move when scrolled
    final position determined by top right bottom and left
position sticky stays in normal flow of document then acts like fixed when scrolled "by"
    offset is set as top right bottom left
    does not work inside elements with overflow:hidden OR auto;
    if multiple sticky elements the first will overwritten by the next when the next is scrolled "by"

float: (none, left, OR right) allows elements to wrap around each other (like wrapping text around an image)
    left and right sets the side you want your element to display on
    can use this to float 2 (or more) images beside each other, set their width to 50%, and now you have 2 solid columns (can also set element height)
    setting the element height makes things look nice until viewed on devices with dif screen sizes, can cause overflow
    can use flexbox to rectify this (google it)
clear: (none, left, right, OR both) sets whether this element can be next to floating elements that precede it or if they must be moved down (cleared) to below them
    both means it will be entirely cleared of floating elements

@media allows changing of styling to only selected devices depending on their type or characteristics
@media parameters {
    element{
        rules for the element
            }
                }       
parameters for @media as follows:
    "print" (no quotes) only applies styling to print devices
    only screen and (max-width: 768px) for extra small devices (phones)
    only screen and (min-width: 768px) and (max-width: 992px) for small devices (tablets)
    change min/max to 992 and 1200 for medium devices
    change min to 1200 px for large devices
    orientation: portrait OR landscape will change styling depending on which direction a device is being oriented
in <head> if you want mobile devices to work you need:
    <meta name="viewport" content="width-device-width, initial-scale=1.0" />




