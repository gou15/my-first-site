type node in terminal to start node.js
ctrl c to exit node in terminal
.js files are javascript files
create js file and execute that file using "node file.js" in terminal (directory must match file location)
to declare a variable... (variables must start with a small letter, other words capitalized, smells good)
    var variableName;
this type of variable format (small letter then big letters) is called "camel case"
variables are assigned definitions using = "definition";
    variableName = "variableDefinition";
    where variableDefinition is a number, do not use quotes
multiple variables can be declared on same line using commas between variable names
    var variableName, variableName2;
variables can also be declared and assigned on same line
    var variableName = "variableDefinition";
    can only declare/assign single variables per line
console.log(variableName); returns variable value in console
console.log("String of Characters ", variableName); returns "String of Characters variableDefinition" in console
use "let" to define variables, smells nicer, can be used in place of "var"
    let variableName = "variableDefinition";

a variable that never changes is a constant, defined with const
an error will be returned if the value of a constant is instructed to be changed

var/let/const base types are as follows:
    string (textual data), number (numbers), boolean (true or false), undefined (a variable without a value), and null (intentionally valueless)
    operations are going to be related to data type we choose

STRING data has single or double quotes around it i.e. let varName = "String of text";)
console.log(variableName, variableName2); returns multiple variable values in console
console.log(variableName + variableName2); returns multiple variable values in console without spaces
    using the plus sign is called concatenation
to insert variables in the middle of string data use template literals
    ${variableName} to insert variables into string data and use back ticks (`) to frame the string data instead of quotes (")
        var variableName = "variableDefinition";
        var template =`Welcome ${variableName} to my site`;
        console.log(template);
    this gives you the same result as string concat, but it's easier
using single quotes allows you to put double quotes in your string data and vice versa

NUMBER data does not use quotes (adding quotes makes it a string and then cannot be manipulated mathematically)

BOOLEAN data only accepts true or false as a value
    let booleanVar = true;
    returns the values "true" and "false" when output to the console

UNDEFINED data is, well, not definined, and it can be assigned to variables without quotes as follows:
    let undefinedVar = undefined;
    returns the value "undefined" when output to the console

NULL data is also not definied, but is done so intentionally
    let nullVar = null;
    returns the value "null" when output to the console

the typeof operator returns a string indicating the type of variable
    console.log(typeof varName);
        this will return the type of data that variable varName is stored as (string, boolean, etc...)

ARITHMETIC!
can use + - * / on literals/variables/constants and return numerical values
can use these operators in constant/variable definitions as well
    const ageOne = 34;
    const ageTwo = 16;
    const result = ageOne + ageTwo;
    console.log(result + 2);
follows order of operations (BEDMAS) rules
division by 0 results in Infinity so the world doesn't asplode
using the % sign will return the remainder of a quotient
increment and decrement operators modify the var by + or - 1
    varDefinition++ or ++varDefinition (or --)
    (similar to using varDefinition = varDefinition + 1;)
    to change increment/decrement value, use your operator and an equal sign, followed by the inc/dec value
    varDefinition += 10; varDefinition *= 2;
    these are all called assignment operators
equality operators compare variable values
    == returns if they are equal or not (true or false)
    != returns if they are inqequal or not (true or false)
    > and < returns true or false based on variable values
    >= and <= returns same thing
    the above all work on number variables and string variables containing numbers
    to get "strict" equality, add another = at the end (=== or !==), only returns true if variables are same data type
logical operators start getting into your IF AND THEN NOT OR and ELSE statements
    && = AND (returns Boolean result based on parameters)
    || = OR (evaluates expressions in order since only 1 needs to be true)
    ! = NOT (inverses Boolean result)

string special characters (use \ to get things to happen in string data)
    \n = new line, \t = tab, \r = carriage return
    can be used to "escape" characters that would otherwise be recognized as code (quotes, brackets, slashes)
string object properties can be used to return information about a string object
    length returns # of characters in object
        (varDefinition.length); gives number of characters in varDefinition
        ("TEXT TEXT TEXT".length); also works
    length can also be stored as a variable

OBJECT METHODS give us different functionality for different data types
STRING METHODS can be called when we have a string variable
use a dot before the method name to call the method and add (); to execute the method
can feed values to the method (called parameters) by putting them in the brackets
    stringVar.method();
    stringVar.method(methodParameter, methodParameter2);
    this will return a new string with the text of the inputs
concat method will put strings together
    stringVar.concat(stringVar2); will return stringVar(value)stringVar2(value)
    stringVar.concat("TEXT", "TEXT2") will return stringVar(value)TEXT TEXT2
toUpperCase and toLowerCase transforms string data to uppercase and lowercase letters
charAt returns character at specific index
    stringVar.charAt(2); returns the THIRD character from the left (first character is in position 0)
    can be used in combinations with string property length to return last character value
        stringVar.charAt(stringVar.length - 1);
slice extracts a section of the string data and returns it as a string
    stringVar.slice(4, 15) will return characters in index 5 thru 14
    omitting the 2nd digit will return all characters after index 4
    can slice from right to left by setting a negative value
        stringVar.slace(0, -25) slices index 0 from left and then 25 index values from right, returns value between those 2 slices
substr returns part of string between start index and a # of characters after it
    stringVar.substr(7, 10); returns 10 characters starting at index 7
split will divide up a string by separating it into substrings using a specified separator character/string
    the separator character/string is called a delimiter
    the resulting object is an array (a list or collection of elements)
    stringVar = "text1, text2, text3, text4";
    stringVarArray = stringVar.split(",") this will return text1 text2 text3 and text4 individually, split by ,
there are a ton more string methods...

NUMBER METHODS let you work with numbers
parseInt returns a whole integer from number stored as a string
    stringVar = "3.20";
    numberVar = parseInt(stringVar);
    console.log (numberVar, typeof numberVar) will return "3 number" in console
parseFloat will return the floating point number, so in the example above you would return value 3.20
toString returns a string representing the specified number
    numberVar = 4;
    message = numberVar.toString() + "2"
    console.log(message) will return 42 and the typeof data is string

CONDITIONALS! IF (this) {THEN (that);}...
IF statements make a result conditional on something else being true
    const number = 1;
    if (number >= 2) {console.log ("This is impossible, number is constantly 1");}
    console.log("Will ALWAYS see this message whether or not condition is met.");
ELSE statments give an alternative to the IF statment when the condition is false
    const number = 1;
    if (number >= 2) {console.log ("This is impossible, number is constantly 1");}
    else {console.log("Will ONLY see this message when condition for above if statement is false.");}
    console.log("Will ALWAYS see this statment.");
CONDITIONAL TERNARY OPERATOR is kind of a shortcut to an IF ELSE statement:
    used inside a variable format as:
    var variable = condition statement ? "Message if true" : "Message if false";
        const number = 1;
        let message = number >= 2 ? "This is impossible" : "Will ONLY see this";
        console.log(message);
ELSE IF statements checks another specific condition
        const number = 1;
    if (number >= 2) {console.log ("This is impossible, number is constantly 1");}
    else if (number === 5) {console.log("Your number is 5");}
    else {console.log("Will ONLY see this message when condition for above if statement is false.");}
    console.log("Will ALWAYS see this statment.");
SWITCH statements make ELSE IF statements neater
    switch(variable){
        case "value1":
            action when variable = value1;
        break;
        case "value2":
            action when variable = value2;
        break;
        etc... etc...
        default:
            action when variable = no other expected values
        }
        case allows you to define what happens in the case that the chosen variable matches the value
        break ensures the script does not continue to run after a case is true
        default is basically your ELSE statement

    EXAMPLE
        const name = "Miriam";
        let message = null;
        switch (name) {
        case "Miriam":
            message = "The name is Miriam";
        break;
        case "Felipa":
            message = "The name is Felipa";
        break;
        case "Xime":
            message = "The name is Xime";
        break;
        case "Belu":
            message = "The name is Belu";
        break;
        default:
            message = "The name is not Miriam, Felipa, Xime or Belu";
        }
    console.log(message);

TRUE and FALSE (Boolean)
all values are true unless they are defined as false (false, null, undefined, 0, NaN, ", or an empty string ())
null values are evaluated as an object so will return as "true", need to add extra validation to account for null values
    var stringVar = "";
    if (stringVar && stringVar != null) {
        console.log(`Welcome ${stringVar});}
    else {
        console.log("Please input your name");}

WHILE statements create a loop as long as conditions are true
    let number = 0;
    while (number < 11){
        console.log(number);
        number++;
        }   this string of code will force the terminal to count up from 0 to 10
DO WHILE statements are different in that the code will be executed at least once before checking the condition
    let number = 2
    DO {
        console.log(number);
        number++;
    } WHILE (number <= 1); this code will display number 2 and then stop since the code is executed first and then the condition is checked

FOR statements create a loop with 3 expressions
    for (itialization; condition; finalExpression){
        console.log(initialization);
    }
    initialization is a variable declaration
    condition is to be evaluated before each loop
    finalExpression to be evaluated at the end of each loop
        for (let number = 0; number <= 10; number++) {
            console.log(number);
        }
            a number variable is initialized, it's condition is evaluated as true or false, then the final expression is executed (if condition = true)
a FOR statement is a cleaner WHILE statement
BREAK terminates a loop or switch statement
    for (let index = 0; index < 1000; index++) {
  if (index < 10) {
    console.log(index);
  } else {
    break;
  }
}   this string of code is only going to display 0 thru 9 since it breaks once the index reaches 10

FUNCTIONS! ... next time


