GRID SYSTEM https://getbootstrap.com/docs/4.3/layout/grid/

grid system using containers, rows, and columns built with flexbox
bootstrap automatically makes classes mean something
.container is set in pixel width
.container-fluid gives width 100% across all viewports
.row are wrappers for columns
columns are children of their rows

    <div class="container">
        <div class="row">
            <div class="colXXX"> (where XXX are column specs)
                <COLUMN 1 CONTENT>
            </div>
            <div class="colXXX">
                <COLUMN 2 CONTENT>

grid columns without a specified width will lay out as equal width columns
    ie four .col-sm will be automatically set to width: 25%;
column classes indicate # of columns you want to use out of max 12/row
    .col-4 = 3 equal-width columns
horizontal padding is built in between columns to create "gutters" (i.e. "no content" zones), 15px each column by default
can remove the padding from the columns by adding .no-gutters to the row class
bootstrap is built with mobile in mind, so there are @media breakpoints set by default, and column sizes are based around those breakpoints
col-xs (0px min) sm (576px min) md (768px min) lg (992px min) or xl (1200px and up) (5 breakpoints)

can mix and match (i.e. set a breakpoint and a column width), like .col-sm-6 (1 column 6 cells wide for small devices and up)
throwing the style= inside your div lets you write additional rules to bootstrap's built in class rules

a closed div with w-25, w-50, w-75, or w-100 will copy the parent column width as a percentage (substitute w for h and now it's height)
totally ok to set different column sizes in same row
use .col-BRKPT-auto to set variable column size based on viewport

using a combination of breakpoints and straight column widths you can set how things will appear on dif devices all in one class assn't
    .col-6 col-md-4 for example is a 6 width column, but reduces to 4 width if on a medium device (min 768px across)
    .col-md-4 will also cause columns to stack at the md breakpoint (i.e. they'll go horizontal rather than side by side, basically sets a minimum screen size to see columns side by side)
    .col-6 is always a 6 width column regardless of viewport

IMAGES https://getbootstrap.com/docs/4.3/content/images/

responsive images are applied so image scales with parent element
    .img-fluid sets max width to 100% and height to auto so image scales automatically

.img-thumbnail gives an image a rounded 1px border
    other border-radius utilities exist

can assign float classes and text alignment classes to align images as well
    .rounded float-left as an example will round the borders and cause the image to squeeze right and float
    .mx-auto centers images
    above classes are set inside the <img> element
    assigning parent div to "text-center" will also force image elements to be centered

BUTTONS https://getbootstrap.com/docs/4.3/components/buttons/

button tags are built to be used with <button> but can be used with <a> or <input>
    if using button tags in <a> elements, assign role="button" in <a> element
.btn btn-XXX (XXX can be primary, secondary (blue or gray), success (green), danger (red), warning (yellow), info (teal), light (lightgray), dark (black), link (transparent))
    colors and assignments are arbitrary and do not help screen reading technology, so visible text should also identify the button
    using .btn btn-outline-XXX will remove background from button and just use border and text color per definitions above

<button type="button" class="btn btn-outline-danger">Danger</button>
.btn-lg or sm changes button sizes
.btn-block makes a button the full width of the parent black
make buttons APPEAR active using .active and adding "aria-pressed="true"" into the button element
make buttons APPEAR disabled by adding "disabled" definition to button element
    <a> elements don't support "disabled", so use .disabled
data-toggle="button" inside button element toggles a button's active state
    requires aria-pressed="false" in button tag
        <button type="button" class="btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off">Single toggle</button>

button styles can be applied to other elements like checkbox and radio forms
    <div data-toggle="buttons" class="btn-group-toggle">
    prechecked buttons? add .manual to the input's label

FORMAT FOR CHECKBOXES
<div class="btn-group-toggle" data-toggle="buttons">
    <label class="btn btn-secondary active">
        <input type="checkbox" checked autocomplete="off"> Checked
    </label>
</div>

FORMAT FOR RADIO BUTTONS
<div class="btn-group btn-group-toggle" data-toggle="buttons">
    <label class="btn btn-secondary active">
        <input type="radio" name="options" id="option1" autocomplete="off" checked> Active
    </label>
    <label class="btn btn-secondary">
        <input type="radio" name="options" id="option2" autocomplete="off"> Radio
    </label>
    <label class="btn btn-secondary">
        <input type="radio" name="options" id="option3" autocomplete="off"> Radio
    </label>
</div>

FORMS! https://getbootstrap.com/docs/4.3/components/forms/

appropriate type needs to be set for each input so the styling doesn't break
text form control <input>, <select> (dropdown), <select multiple>, and <textarea> are stylized using .form-control
    div class set to .form-group, individual divs for all inputs
    for file inputs, change .form-control to .form-control-file

<div class="form-group">
    <input class="form-control" type="TEXT">

set heights by adding .form-control.SZ to input element (i.e. class="form-control form-control-lg")
readonly attribute added to input element will gray out text box (same as disabled but retains standard cursor)
    use .form-control-plaintext in input element to remove the textbox from readonly elements (kind of hides the fact that this is an input line)

inline forms can be set as follows:
form .form-inline   div .form-group mb-2 label .sr-only

range inputs can be set as follows:
<input type="range" class="form-control-range:>

use .form-check for radio and checkbox div elements
    .form-check-input in input elements
    .form-check-label in label elements
    disabled attribute is supported
    <input> and <label> elements are equal line elements (no effect on functionality, just cleanliness)
add .form-check-inline in div element to move checkboxes/radios horizontally rather than vertically
    i.e. <div class="form-check form-check-inline">
blank/unlabeled radio/checkboxes require .position-static in <input> element so they stay pretty

inserting rows and columns inside of forms allows for styling flexibility
just add .row divs and .col subdivs as children to the form elements
using .form-row instead of just "row" is a style variant that makes things tighter

horizontal forms (label left of input rather than on top of input)
    .row gets added to all child div elements of row element
    .col in child divs of above child divs
        <labels> will need .col-form-label so they understand what's up
        add -SZ classes to label and legend elements if you change size of input elements so they look nice

    there's more for forms... but now

NAVBARS! https://getbootstrap.com/docs/4.3/components/navbar/

.navbar with .navbar-expand-SZ for responsive, collapsing navbar
navbars are fluid by default, and disappear when printing (unless .d-print with navbar class)
all sorts of utility classes here, color schemes, optional containers, spacing, flex
use <nav> element for navbars (if using <div> add role="navigation attribute)
.navbar-brand for company/product/project name
.navbar-nav for full-height, lightweight navigation (dropdowns allowed)
.navbar-toggler for use with collapse
.form-inline for any form controls/actions
.navbar-text for adding vertically centered text strings
.collapse.navbar-collapse for grouping and hiding navbar contents by a parent breakpoint
bring it all together:

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Link</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#">Action</a>
                        <a class="dropdown-item" href="#">Another action</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Something else here</a>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
                </li>
            </ul>
            <form class="form-inline my-2 my-lg-0">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>









