npm = Node Package Manager, lets us install node.js modules and import them into our projects
wombats
need to be working directly in the folder in the terminal for all this to work

npm init -y sets up our package.json object which allows us to start importing and using modules
this package contains scripts that we can set, create and modify

"start": "node index.js" will run the node index.js command when we use npm start in the console
    this would work only with an index.js file, which you'd have to create, or you can use whatever other filename you want

npm install lets us download and install other modules to be used in our projects
search for modules at npmjs.com
to install a module globally add -g at the end of your install command (i.e. npm install express -g)
to install a module as a developer module add -D to the end of the command (i.e. npm install logplease -D)
to install a module just to the project you're working on don't add any goofy letters
create a .gitignore file and list the folders or files you want it to ignore inside of it so you aren't uploading all this nonsense to github
if you just run npm install it will read the dependencies of the package.json file and download the appropriate modules for you

npm uninstall does the opposite of the above
it will also remove the module from your list of dependencies

a module is a way to encapsulate our code into a single code unit, order by functionality
can creat single files and use them as modules in our projects
require - accepts a string as a parameter with the name of the module we want to use
    let module = require("MODULENAME");   OR
    let module = require("./FILEPATHWAY");
    note that these are string parameters and you shouldn't use the file extension
we're telling node to get the MODULENAME code
check out calc.js, index.js, and package.json in the learning-node folder to see how these talk to each other
    created a module called calc, exported a calc function from the calc module, required it in the index, and then executed that function with parameters to return a result
    if we called this calculator 50 different times across our project we don't need to update code 50 times, just once in the calc module
    we can only access and use what is being exported using module.exports

arrow functions are just another way of writing functions
    let hello = function(parameters){code}  BECOMES
    let hello = (parameters) => {code}
    let hello = parameter => {code}   did you know you can drop the brackets if you only want to pass 1 parameter? I didn't. I do now.

node.js has a built in http module which we can use to create a web server
server listens for requests and sends responses
npm init does not need to be run as we're using a built in module 
    let http = require("http");
    let port = ####;    where #### is the port number we want to use (3000)
createServer method accepts a function as a parameter which itself accepts 2 parameters representing a request and a response
the callback function will be executed on each request and we can handle the response
    let requestHandler = (request, response) => {
        response.end("Message text");
    }
    let server = http.createServer(requestHandler);
requestHandler is being used as createServer callback, so requestHandler receives a request and response object the represents the http request and response
when we get a request we need to send a response, which in this case is just the message text
server.listen will tell the server which port it should be listening to, accepts a port number as parameter as well as a callback function as a 2nd parameter which gets executed when the server starts listening
callback function also gets an error parameter which we can use to check if something broke
    server.listen(port, err => {
        if (err) {
            return console.log("this is the error that happened" + err);
        }
        console.log("all good and working on port " + port);
    });

bring that all together:

    let http = require("http");
    let port = 3000;
    let requestHandler = (request, response) => {
        console.log(request.url);
        response.end("Hello Node.js Server!");
    };
    let server = http.createServer(requestHandler);
    server.listen(port, err => {
        if (err) {
            return console.log("something bad happened", err);
        }
        console.log(`server is listening on ${port}`);
    });

execute this code in a .js file and you've got a webserver running which you can open in your browser at
localhost:PORT
this is all well and good but we're going to be using express to launch webservers

EXPRESS
can handle any HTTP request, create and handle routes, and more
can use express to respond with static content or create dynamic content or use a database or no database...
express is a module, you need in install it (npm install express)
    const express = require("express");
    const app = express();
    const port = 3000;
    app.get("/", function(request, response) {
        response.send("Hello Node.js World!");
    });
    app.listen(port, function(error) {
    if (error) {
        console.error("This is broken, port " + port + " " + error);
    }
    console.log("Example app listening on port 3000!");
    });

bam you got a webserver going, just like that (we create a simple server, require the express module and create an express app, configure a GET for the default route (/), listen on a port, and we have it running at localhost:PORT)

GET
you use a get method to obtain GET requests
get accepts a string as first paramater (which is the route we want to handle) and a callback function that accepts 2 objects (request and response) as parameters
    response object has a send method that we can use to send some data to the client as the response which is why we can see the message back when we send a request to our server
        app.get("/", function(request, response){
            response.send("Message");
        });
the express object has many methods to handle HTTP requests using different HTTP methods:
    app.post("/", function(request, response){
        response.send("Request using POST");
    });
    app.put("/", function(request, response){
        response.send("Request using PUT");
    });
    app.delete("/", function(request, response){
        response.send("Request using DELETE");
    });
    app.all("/", function(req, res) {
        res.send("Request using GET, POST, PUT or DELETE");
    });

let's make this a little more relevant:
    app.get("/products", function(req, res) {
        res.send("On this call we show a list of products");
    });
    app.post("/product/:id", function(req, res) {
        res.send("On this call we create a product");
    });
    app.put("/product/:id", function(req, res) {
        res.send("On this call we update a product");
    });
    app.delete("/product/:id", function(req, res) {
        res.send("On this call we delete a product");
    });

browser can only use GET requests
a POST request would come from a form with method POST
an app called Postman will help us request using different HTTP methods and ensure they work https://www.postman.com/

using response we can send the repsonse to the client and choose different formats (JSON, html, whatever)
using the json method we can pass JS objects as parameters and it will transform it into JSON for us
    app.get("/", function(request, response){
        response.json({name: "Marta", age: "40"});
    });     //when called this will return {"name":"Marta","age:":40"} as JSON

the sendFile method will send a file back (any file as long as the client knows how to read the file)
    const express = require("express");
    const app = express();
    const path = require("path");
    const port = 3000;

    app.get("/", function(request, response) {
        response.sendFile(path.join(__dirname, "index.html"));
    });

    app.listen(port, function() {
        console.log("Example app listening on port 3000!");
    });

    we're using the path module here to join a __dirname var and the filename we want to send
    this module has a join method that lets us join the values which creates an absolute path so sendFile knows exactly where it needs to get the file from

ROUTERS
you can end up with many routes for one resources and our server file can end up giant
we can use express router to handle this, grouping routes by action or resource type making things easier to read and maintain
here's a super long example with dev notes:
    HOME.js
    var express = require("express");   // Create the express router to handle our home requests
    var router = express.Router();

    router.get("/", function(req, res) {
        res.send("Welcome to our Site!");
    });

    module.exports = router;

    PRODUCTS.js
    var express = require("express");   // Create the express router to handle our products requests
    var router = express.Router();

    router.get("/", function(req, res) {
        res.send("On this call we show a list of products");
    });
    router.post("/:id", function(req, res) {
        res.send("On this call we create a product");
    });
    router.put("/:id", function(req, res) {
        res.send("On this call we update a product");
    });
    router.delete("/:id", function(req, res) {
        res.send("On this call we delete a product");
    });

    module.exports = router;

    INDEX.js
    const express = require("express");
    const app = express();

    // Routers
    const home = require("./home.js");
    const products = require("./products.js");

    app.use("/", home);
    app.use("/products", products);

in this super long example we have multiple routers using the express router module
each router we create is mounted on the express app and is configured to the url that is needs to handle
express.Router() creates a new router
use router.get/router.post to handle the get and post HTTP methods
then using app.use we tell express to use these route handlers
this whole thing is called router mounting

the response object also has a status method that allows us to set HTTP status code responses
like a custom 404 file not found message, but for a bunch of status codes
by default, status code is 200 for "all is good yo"
    app.get("/", function(request, response) {
        res.status(200).json({ firsname: "Pepe", lastname: "Martin" });
    });
    app.get("/error", function(request, response) {
        res.status(500).send("Server error");
    });
    app.use(function(req, res, next) {
        res.status(404).send("Sorry can't find that!");
    });   //note that the route isn't defined here, so any route that isn't defined will return our 404 error

there's another paramater to add here which is the error paramater (error, request, response, next)
if we get an error it's send in response
the functions that we pass are parameters are called middleware
    app.use(function(err, req, res, next) {
        console.error(err.stack);
    res.status(500).send("Something broke!");
    });

MIDDLEWARE
a function that has access to request and response objects
can be chained using the next function in the request-response cycle
it's a function in the express router
middleware gets three parameters - request, response, next (next is a callback)
to use middleware we use the express use method
    const express = require("express");
    const app = express();

    const myMiddleware = function(req, res, next) {
        req.someValue = "This is a value to test the Middleware";
        next();
    };

    app.use(myMiddleware);

    app.get("/", (req, res) => {
        const responseMessage = req.someValue; // We get the request value that we setted from the middleware
        res.send(responseMessage);
    });

    app.listen(3000);

middleware is a functionthat will get executed on each request
the morgan module acts as a logger when installed
    const express = require("express");
    const logger = require("morgan");
    const app = express();

    app.use(logger("dev"));

so far we've been returning static assets
static assets can be configured by express to be served from a folder
this is a public folder
express has a static method that accepts one string parameter - the static folder name
the static method returns a function so it is middleware and can be configured with the use method
    const express = require("express");
    const app = express();

    app.use(express.static("public")); //we set a public folder to serve our static assets
we can call the express server and request files like index.html, style.css, or script.js
don't need to define routes for our own static assets (get, post, etc...)
can also create a static assets alias using app.use as first parameter and passing middleware as the second parameter:
    const express = require("express");
    const app = express();

    app.use("/assets", express.static("public"));
in this example we create /assets as our public static assets, which means using /assets as URL we'll have access to the public folder content
we now need to change the way we call our assets:
    http://localhost:3000/assets/img/logo.png
    http://localhost:3000/assets/js/script.js
    http://localhost:3000/assets/css/styles.css
    http://localhost:3000/assets/index.html

this effectively hides our folder architecture, and we can now change folder names without having to update the alias
    app.use(express.static("public"));
    app.use(express.static("imgs"));
in this case express will try to find our assets in the public folder, then it will look for them in the imgs folder

TEMPLATES
express can configure different template engines
PUG is a default template engine which lets us write shorter HTML content (previously called Jade)
PUG works with indentation or white space similar to Python
    npm install pug --save
    app.set("view engine", "pug");
using app.set as our method to set our view engine and use pug
pug templates use the .pug extension
    INDEX.pug
        doctype html
        html(lang='en')
        head
            title= title
        body
            h1= message
            div.container
            p Starting using Pug!

looks like HTML but way shorter
need to save this pug file in the views folder (subfolder at the same level as index.js)
pug will compile this template into HTML and throw a compilation error if we bugger it up
can assign values to elements using the  = sign (ie. h1= message)
can assign classes (and id's) using dots and hashes ie. div.container#myID
use render method to pass the template name and the JS object where each property will become a template variable
    const express = require("express");
    const app = express();

    app.set("view engine", "pug");

    app.get("/", (req, res) => {
        res.render("index", { title: "Hey", message: "Hello there!" });
    });

    app.listen(3000);

visiting localhost:3000 will render the index.pug template passing both title and message variables to the template
final result will be a beautiful HTML document
best way to format pug files is to use the element, a pipe, then the content after indentation:
    p
        | text as content

use parenthesis to write HTML element attributes:
    a.hover#red(href="contact.html", target="_blank") Contact
    will render to <a href = "contact.html" class = "hover" id = "red" target = "_blank">Contact</a>

still buidling a complete HTML document...
use mixin to allow us to ude code blocks
    PRODUCT-MIXIN.pug
    mixin product
        .product-wrapper
            h2 Product
            p Product Description

so we created this mixin, and we can get the mix in in our index.pug
    INDEX.pug
    indclude product-mixin
    body
        +product

we use pug include to get mixin content and call it from the index template
the plus sign tells pug that this is the mix in we want to use (like a function that we'd call with JS)
currently calling static content... we can add variables to make this mixin more useful:
    PRODUCT-MIXIN.pug
    mixin product(product)
        .product-wrapper
            h2 product.title
            p product.description

    INDEX.pug
    indclude product-mixin
    body
        +product ({title "PS4 Pro", description: "A garbage-tier console."});

added a product parameter to the mixin so we can pass data to it, then we call it and pass an object to it
pug all supports template inheritance using block and extends keywords
block is a block of pug that a child template may replace over the template
    this process is recursive
    can provide default content in case we need it
        LAYOUT.pug
        doctype html
            html(lang='en')
                head
                    title= title
                    style(type="text/css").
                    body {
                        color: red;
                    }
                block scripts
            body
                block content
                block foot

this example calls the scripts, content, and foot blocks, can extend this to other templates
INDEX.pug
extends ./layout.pug
include product-mixin

block scripts
  script.
    alert('alert from a block');

block content
  h1= message
  div.container
    p Starting using Pug!
  p
    | text as content
  p.
    text as content
  p text as content
  a.foo_link(href='about.html', target='_blank') About Us
  div#main main content
  div.red text in red
  section
    +product({title: 'PS4 Pro', description: 'Best console ever, so far..' })
  section
    +product({title: 'XBOX', description: 'Other great console' })

block foot
  div This footer content comes from a block

use - to define JS variable inside pug templates
    - const niceTitle = 'This is a nice title';
    h1= niceTitle
    p This template has a nice #{niceTitle}

if you use HTML inside your JS string variables pug will escape the content for us
can use conditionals inside the templates as well:
    - var language = "spanish"

    if language == "spanish"
        p Estas programando muy bien, felicitaciones!!
    else
        p Your code rocks, Congrats!!

can iterate over things too:
    - hookCharacters = ['Peter', 'Nana', 'Captain Hook']

    ul
        each character in hookCharacters
            li= character

in this example we used an array but we could get this value from express and use the render method
using each gives us the value of the array

we can send data from the client to the server using forms or AJAX calls
forms will send GET and POST data, AJAX will send HTTP GET, POST, UPDATE, and DELETE
need to configure express routes to get the request values using one of these methods
if the server is expecting a GET value the client will send the data using the GET method
need to send values to the server the way it is expected
easiest way to pass a value to the route handler is using the express parameters
    create a route handler for /products/
    we want to pass an id to the products handler
    do this using : i.e. /products/:id
    using this URL, :id is the parameter that we're going to pass
        app.get("/products/:id", (req, res) => {
            res.send("Product with the id: ");
        });
this example has a route handler expecting a URL parameter
we need to retrieve the id parameter using Express
request object has a parameter property that is in aobject with all the parameters that this request has
since we configured id we can call /products/10 and there's going to be an id property on the request.params object:
    app.get("/products/:id", (req, res) => {
        const id = req.params.id;
        res.send(`Product with the id: ${id}`);
    });

can also accomplish this using query string:
    app.get("/products", (req, res) => {
        const id = req.query.id;
        res.send(`Product with the id: ${id}`);
    });

using params means /products/:id and req.params.id
using query means /products and req.query.id
now we could use a form and send values to the server
    <form action="/products" method="get">
        <input type="text" name="username" placeholder="username" />
        <input type="text" name="firstname" placeholder="firstname" />
        <input type="text" name="lastname" placeholder="lastname" />
        <input type="submit" value="Submit" />
    </form>
    this form has 3 inputs and will be submitted to /products using GET and as a string, express handler this as follow:
    app.get("/products", (req, res) => {
        const username = req.query.username;
        const firstname = req.query.firstname;
        const lastname = req.query.lastname;
        res.send(
            `We got the following values from the query string: ${username}, ${firstname} & ${lastname}`
        );
    });

we can use query string to retrieve the values from the form
if method = "post" you need to add body-parser that's express middleware as you can't simply retrieve the string values
body-parser can get POST requests, it needs to be installed
npm install body-parser, then configure it:
    const bodyParser = require("body-parser");
    const urlencodedParser = bodyParser.urlencoded({ extended: false });

    app.post("/products", urlencodedParser, (req, res) => {
        const username = req.body.username;
        const firstname = req.body.firstname;
        const lastname = req.body.lastname;
        console.log(req.body);
        
        res.send(
        `We got the following values from the query string: ${username}, ${firstname} & ${lastname}`
        );
    });
a route handler for /products/ was configured, submitted the form to the route handler
then using urlencodedParser we configure this route to use body-parser which means when this route gets called we'll have the form values in the req.body object
to get the values sent from the form we used req.body.username, firstname, and lastname

express won't handle our files upload so we need to use a module called Multer
multer works similar to body-parser, can only use multer if we're uploading images
if you're uploading images the form type needs to change from form enctype to multipart/form-data
multer appends the values to the request body, can be configured to use one or many files
npm install multer

    const multer = require("multer");
    const upload = multer({ dest: "upload" });
    app.post("/products", upload.single("file"), (req, res) => {
        const filename = req.file.originalname;

        console.log(req.body);
        console.log(req.file);

        res.send(`Congrats we uploaded the following file ${filename}`);
    });

multer will store the input values into the request body in the same way as body-parser
we also told multer with upload.single to use req.file to append all the file values
we also used file as an input name, so if I uploaded a different file name my req.file object will store the original file name:
    {
    fieldname: 'file',
    originalname: 'lukecage.jpg',
    encoding: '7bit',
    mimetype: 'image/jpeg',
    destination: 'upload',
    filename: '7b4f43860a856577f5c47aba1ae592c5',
    path: 'upload/7b4f43860a856577f5c47aba1ae592c5',
    size: 13078
    }
multer randomizes the filename so on the server this won't be lukecage.jpg but 23985298ufjslka.jpg (or whatever)











